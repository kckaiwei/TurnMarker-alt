/*! For license information please see turnmarker.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/scripts/chatter.js":(e,t,a)=>{a.r(t),a.d(t,{Chatter:()=>n});var s=a("./src/scripts/settings.js");class n{static sendTurnMessage(e,t=!1){let a=[];e.players.forEach((e=>{a.push(e.name)})),0==a.length&&a.push("GM");let n=e.actor.name,r=n;s.Settings.getAnnounceTokenName()&&(n=e.token.name,r=e.name),t&&!e.actor.hasPlayerOwner&&(n="???"),ChatMessage.create({speaker:{actor:e.actor,alias:r},content:`<div class="flexrow">${this.placeImage(e)}\n                    <div style="flex: 12;">\n                        <h2>${n}'s Turn</h2>\n                        <p>${a.join(" - ")}</p>\n                    </div>\n                    </div><em>Turn Marker</em>`})}static placeImage(e){if(s.Settings.getIncludeAnnounceImage()){let t=e.img;return e.flags.core&&e.flags.core.thumb&&(t=e.flags.core.thumb),`<div style="flex:3;"><img src="${t}" style="border: none;" /></div>`}return""}}},"./src/scripts/marker.js":(e,t,a)=>{a.r(t),a.d(t,{Marker:()=>i});var s=a("./src/scripts/markeranimation.js"),n=a("./src/scripts/settings.js"),r=a("./src/scripts/utils.js");class i{static async deleteTurnMarker(){const e=canvas.scene.getEmbeddedCollection("Tile").filter((e=>e.flags.turnMarker)).map((e=>e._id));game.user.isGM?await canvas.scene.deleteEmbeddedEntity("Tile",e):game.socket.emit(r.socketName,{mode:r.socketAction.deleteTurnMarker,tileData:e.data})}static async deleteOnDeckMarker(){const e=canvas.scene.getEmbeddedCollection("Tile").filter((e=>e.flags.deckMarker)).map((e=>e._id));game.user.isGM?await canvas.scene.deleteEmbeddedEntity("Tile",e):game.socket.emit(r.socketName,{mode:r.socketAction.deleteOnDeckMarker,tileData:e.data})}static async placeTurnMarker(e,t){if(t)return await this.moveMarkerToToken(e,t,"turnmarker"),t;if(await this.deleteTurnMarker(),n.Settings.getIsEnabled("turnmarker")){let t=(0,r.findTokenById)(e),a=this.getImageDimensions(t,!1,"turnmarker"),s=this.getImageLocation(t,!1,"turnmarker"),i=new Tile({img:n.Settings.getImagePath(),width:a.w,height:a.h,x:s.x,y:s.y,z:900,rotation:0,hidden:t.data.hidden,locked:!1,flags:{turnMarker:!0}});return(await canvas.scene.createEmbeddedEntity("Tile",i.data))._id}return null}static async placeOnDeckMarker(e){if(await this.deleteOnDeckMarker(),n.Settings.getIsEnabled("deckmarker")){let t=(0,r.findTokenById)(e),a=this.getImageDimensions(t,!1,"deckmarker"),s=this.getImageLocation(t,!1,"deckmarker"),i=new Tile({img:n.Settings.getOnDeckImagePath(),width:a.w,height:a.h,x:s.x,y:s.y,z:900,rotation:0,hidden:t.data.hidden,locked:!1,flags:{deckMarker:!0}});game.user.isGM&&await canvas.scene.createEmbeddedEntity("Tile",i.data)}}static async deleteStartMarker(){const e=canvas.scene.getEmbeddedCollection("Tile").filter((e=>e.flags.startMarker)).map((e=>e._id));game.user.isGM?(await canvas.scene.unsetFlag(r.FlagScope,r.Flags.startMarkerPlaced),await canvas.scene.deleteEmbeddedEntity("Tile",e)):game.socket.emit(r.socketName,{mode:r.socketAction.deleteStartMarker,tileData:e.data})}static async placeStartMarker(e){if(await this.deleteStartMarker(),n.Settings.getIsEnabled("startmarker")){let t=(0,r.findTokenById)(e),a=this.getImageDimensions(t),s=this.getImageLocation(t),i=new Tile({img:n.Settings.getStartMarker(),width:a.w,height:a.h,x:s.x,y:s.y,z:900,rotation:0,hidden:t.data.hidden,locked:!1,flags:{startMarker:!0}});game.user.isGM&&(await canvas.scene.createEmbeddedEntity("Tile",i.data),await canvas.scene.setFlag(r.FlagScope,r.Flags.startMarkerPlaced,!0))}}static async moveMarkerToToken(e,t,a="turnmarker"){let s=(0,r.findTokenById)(e),n=this.getImageDimensions(s,!1,a),i=this.getImageLocation(s,!1,a);await canvas.scene.updateEmbeddedEntity("Tile",{_id:t,width:n.w,height:n.h,x:i.x,y:i.y,hidden:s.data.hidden})}static async clearAllMarkers(){await this.deleteTurnMarker(),await this.deleteStartMarker(),await this.deleteOnDeckMarker()}static async updateImagePath(){if(game.user.isGM){let e=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker));e&&await canvas.scene.updateEmbeddedEntity("Tile",{_id:e.id,img:n.Settings.getImagePath()})}}static async updateOnDeckImagePath(){if(game.user.isGM){let e=canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker));e&&await canvas.scene.updateEmbeddedEntity("Tile",{_id:e.id,img:n.Settings.getOnDeckImagePath()})}}static async reset(){s.MarkerAnimation.stopAllAnimation(),await this.clearAllMarkers()}static getImageDimensions(e,t=!1,a="turnmarker"){let s=t?1:n.Settings.getRatio(a),r=0,i=0;switch(canvas.grid.type){case 2:case 3:r=i=e.h*s;break;case 4:case 5:r=i=e.w*s;break;default:r=this.getSmallerDimension(e.w,e.h)*s,i=this.getSmallerDimension(e.w,e.h)*s}return{w:r,h:i}}static getSmallerDimension(e,t){return e<t?e:t}static getImageLocation(e,t=!1,a="turnmarker"){let s=t?1:n.Settings.getRatio(a),r=0,i=0;switch(canvas.grid.type){case 2:case 3:r=e.center.x-e.h*s/2,i=e.center.y-e.h*s/2;break;case 4:case 5:r=e.center.x-e.w*s/2,i=e.center.y-e.w*s/2;break;default:r=e.center.x-this.getSmallerDimension(e.w,e.h)*s/2,i=e.center.y-this.getSmallerDimension(e.w,e.h)*s/2}return{x:r,y:i}}static movePan(e){let t=(0,r.findTokenById)(e),a=this.getImageLocation(t);return canvas.animatePan({x:a.x,y:a.y})}}},"./src/scripts/markeranimation.js":(e,t,a)=>{a.r(t),a.d(t,{MarkerAnimation:()=>n});var s=a("./src/scripts/settings.js");class n{static startAnimation(e="turnmarker"){return this.animators||(this.animators={}),e in this.animators?this.animators[e]:(this.animators[e]=this.animateRotation.bind(this,e),canvas.app.ticker.add(this.animators[e]),this.animators)}static stopAnimation(e="turnmarker"){this.animators&&(canvas.app.ticker.remove(this.animators[e]),delete this.animators[e])}static stopAllAnimation(){for(const[e,t]of Object.entries(this.animators))canvas.app.ticker.remove(this.animators[e]);this.animators={}}static animateRotation(e,t){let a;switch(e){case"turnmarker":a=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker));break;case"deckmarker":a=canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker));break;default:a=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker))}if(a&&a.data.img){let e=s.Settings.getInterval()/1e4;try{a.tile.img.rotation+=e*t}catch(e){}}}}},"./src/scripts/settings.js":(e,t,a)=>{a.r(t),a.d(t,{imageTitles:()=>A,deckImageTitles:()=>P,announcedActorOptions:()=>R,Settings:()=>D});var s=a("./src/scripts/marker.js"),n=a("./src/scripts/markeranimation.js"),r=a("./src/scripts/settingsForm.js"),i=a("./src/scripts/utils.js");const m="tm-version",o="interval",c="announce-turn",g="announce-Actors",d="announce-image",l="announce-token",u="image",k="customimage",h="ratio",p="turnmarker-enabled",f="animation",b="ondeckmarker-enabled",M="deckimage",y="customdeckimage",v="deckratio",I="deckanimation",S="deckplayersonly",w="startMarker-enabled",T="startMarker-custom",N="panToToken-enabled",A=["Runes of Incendium by Rin","Runes of the Cultist by Rin","Runes of Regeneration by Rin","Runes of the Cosmos by Rin","Runes of Earthly Dust by Rin","Runes of Reality by Rin","Runes of the Believer by Rin","Runes of the Mad Mage by Rin","Runes of the Blue Sky by Rin","Runes of the Universe by Rin","Runes of Prosperity by Rin"],P=["Runes of Prosperity by Rin","Runes of Incendium by Rin","Runes of the Cultist by Rin","Runes of Regeneration by Rin","Runes of the Cosmos by Rin","Runes of Earthly Dust by Rin","Runes of Reality by Rin","Runes of the Believer by Rin","Runes of the Mad Mage by Rin","Runes of the Blue Sky by Rin","Runes of the Universe by Rin"],R=["Announce for all","Announce for players","Announce for GM-controlled","Announce all but hide GM-controlled names"];class D{static getVersion(){return game.settings.get(i.modName,m)}static setVersion(e){game.settings.set(i.modName,m,e)}static getRatio(e){switch(e){case"turnmarker":return game.settings.get(i.modName,h);case"deckmarker":return game.settings.get(i.modName,v)}}static setRatio(e){game.settings.set(i.modName,h,e)}static setDeckRatio(e){game.settings.set(i.modName,v,e)}static getShouldAnimate(e){switch(e){case"turnmarker":return game.settings.get(i.modName,f);case"deckmarker":return game.settings.get(i.modName,I)}}static getInterval(){return game.settings.get(i.modName,o)}static shouldAnnounceTurns(){return game.settings.get(i.modName,c)}static setShouldAnnounceTurns(e){game.settings.set(i.modName,c,e)}static getAnnounceActors(){return game.settings.get(i.modName,g)}static setAnnounceActors(e){return game.settings.set(i.modName,g,e)}static getAnnounceTokenName(){return game.settings.get(i.modName,l)}static setAnnounceTokenName(e){return game.settings.set(i.modName,l,e)}static getIncludeAnnounceImage(){return game.settings.get(i.modName,d)}static setIncludeAnnounceImage(e){game.settings.set(i.modName,d,e)}static getImageIndex(e){switch(e){case"turnmarker":return game.settings.get(i.modName,u);case"deckmarker":return game.settings.get(i.modName,M)}}static getStartMarker(){return""==game.settings.get(i.modName,T).trim()?"modules/turnmarker/assets/start.png":game.settings.get(i.modName,T)}static getIsEnabled(e){switch(e){case"turnmarker":return game.settings.get(i.modName,p);case"deckmarker":return game.settings.get(i.modName,b);case"startmarker":return game.settings.get(i.modName,w);case"panToToken":return game.settings.get(i.modName,N)}}static setIsEnabled(e,t){switch(e){case"turnmarker":game.settings.set(i.modName,p,t);break;case"deckmarker":game.settings.set(i.modName,b,t);break;case"startmarker":game.settings.set(i.modName,w,t);break;case"panToToken":game.settings.set(i.modName,N,t)}}static getStartMarkerPath(){return game.settings.get(i.modName,T)}static setStartMarkerPath(e){game.settings.set(i.modName,T,e)}static getImagePath(){return""==game.settings.get(i.modName,k).trim()?this.getImageByIndex(game.settings.get(i.modName,u)):game.settings.get(i.modName,k)}static getOnDeckImagePath(){return""==game.settings.get(i.modName,y).trim()?this.getDeckImageByIndex(game.settings.get(i.modName,M)):game.settings.get(i.modName,y)}static getImageByIndex(e){switch(e){case 0:return"modules/turnmarker/assets/incendium.png";case 1:return"modules/turnmarker/assets/cultist.png";case 2:return"modules/turnmarker/assets/regeneration.png";case 3:return"modules/turnmarker/assets/cosmos.png";case 4:return"modules/turnmarker/assets/earthlydust.png";case 5:return"modules/turnmarker/assets/reality.png";case 6:return"modules/turnmarker/assets/believer.png";case 7:return"modules/turnmarker/assets/madmage.png";case 8:return"modules/turnmarker/assets/bluesky.png";case 9:return"modules/turnmarker/assets/universe.png";case 10:return"modules/turnmarker/assets/prosperity.png"}}static getDeckImageByIndex(e){switch(e){case 0:return"modules/turnmarker/assets/prosperity.png";case 1:return"modules/turnmarker/assets/incendium.png";case 2:return"modules/turnmarker/assets/cultist.png";case 3:return"modules/turnmarker/assets/regeneration.png";case 4:return"modules/turnmarker/assets/cosmos.png";case 5:return"modules/turnmarker/assets/earthlydust.png";case 6:return"modules/turnmarker/assets/reality.png";case 7:return"modules/turnmarker/assets/believer.png";case 8:return"modules/turnmarker/assets/madmage.png";case 9:return"modules/turnmarker/assets/bluesky.png";case 10:return"modules/turnmarker/assets/universe.png"}}static setImage(e,t){switch(e){case"turnmarker":game.settings.set(i.modName,u,t);break;case"deckmarker":game.settings.set(i.modName,M,t)}}static getCustomImagePath(){return game.settings.get(i.modName,k)}static setCustomImagePath(e){game.settings.set(i.modName,k,e)}static getCustomDeckImagePath(){return game.settings.get(i.modName,y)}static setCustomDeckImagePath(e){game.settings.set(i.modName,y,e)}static getDeckPlayersOnly(){return game.settings.get(i.modName,S)}static setDeckPlayersOnly(e){game.settings.set(i.modName,S,e)}static registerSettings(){game.settings.registerMenu(i.modName,"tm.settingsMenu",{name:"tm.settings.button.name",label:"tm.settings.button.label",icon:"fas fa-sync-alt",type:r.SettingsForm,restricted:!0}),game.settings.register(i.modName,m,{name:`${i.modName} version`,default:"0.0.0",type:String,scope:"world"}),game.settings.register(i.modName,h,{name:"tm.settings.ratio.name",hint:"tm.settings.ratio.hint",scope:"world",config:!1,type:Number,default:1.5,restricted:!0}),game.settings.register(i.modName,f,{name:"tm.settings.animate.name",hint:"tm.settings.animate.hint",scope:"user",config:!0,type:Boolean,default:!0,onChange:e=>{!game.paused&&e&&canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker))?n.MarkerAnimation.startAnimation("turnmarker"):n.MarkerAnimation.stopAnimation("turnmarker")}}),game.settings.register(i.modName,I,{name:"tm.settings.deckAnimate.name",hint:"tm.settings.deckAnimate.hint",scope:"user",config:!0,type:Boolean,default:!0,onChange:e=>{!game.paused&&e&&canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker))?n.MarkerAnimation.startAnimation("deckmarker"):n.MarkerAnimation.stopAnimation("deckmarker")}}),game.settings.register(i.modName,o,{name:"tm.settings.interval.name",hint:"tm.settings.interval.hint",scope:"user",config:!0,type:Number,default:100}),game.settings.register(i.modName,u,{name:"tm.settings.image.name",scope:"world",config:!1,type:Number,default:0,choices:A,restricted:!0,onChange:e=>s.Marker.updateImagePath(e)}),game.settings.register(i.modName,v,{name:"tm.settings.deckRatio.name",hint:"tm.settings.deckRatio.hint",scope:"world",config:!1,type:Number,default:1.5,restricted:!0}),game.settings.register(i.modName,M,{name:"tm.settings.deckImage.name",scope:"world",config:!1,type:Number,default:0,choices:P,restricted:!0,onChange:e=>s.Marker.updateOnDeckImagePath(e)}),game.settings.register(i.modName,y,{name:"tm.settings.customDeckImage.name",hint:"tm.settings.customDeckImage.hint",scope:"world",config:!1,type:String,default:"",restricted:!0,onChange:e=>s.Marker.updateOnDeckImagePath(e)}),game.settings.register(i.modName,b,{name:"tm.settings.onDeckMarkerEnabled.name",hint:"tm.settings.onDeckMarkerEnabled.hint",scope:"world",config:!1,type:Boolean,default:!1,restricted:!0,onChange:e=>{if(e){if(game.combat&&game.combat.combatant&&game.combat.started){let e=(0,i.getNextTurn)(game.combat);s.Marker.placeOnDeckMarker(game.combat.turns[e].token._id)}}else s.Marker.deleteOnDeckMarker()}}),game.settings.register(i.modName,S,{name:"tm.settings.deckPlayersOnly.name",hint:"tm.settings.deckPlayersOnly.hint",scope:"world",config:!1,type:Boolean,default:!0,restricted:!0}),game.settings.register(i.modName,g,{name:"tm.settings.announcedActors.name",hint:"tm.settings.announcedActors.hint",scope:"world",config:!1,type:Number,default:0,restricted:!0,choices:R}),game.settings.register(i.modName,l,{name:"tm.settings.announceTokenName.name",hint:"tm.settings.announceTokenName.hint",scope:"world",config:!1,type:Boolean,default:!1,restricted:!0}),game.settings.register(i.modName,k,{name:"tm.settings.customImage.name",hint:"tm.settings.customImage.hint",scope:"world",config:!1,type:String,default:"",restricted:!0,onChange:e=>s.Marker.updateImagePath(e)}),game.settings.register(i.modName,c,{name:"tm.settings.announce.name",hint:"tm.settings.announce.hint",scope:"world",config:!1,type:Boolean,default:!0}),game.settings.register(i.modName,d,{name:"tm.settings.announceImage.name",hint:"tm.settings.announceImage.hint",scope:"world",config:!1,type:Boolean,default:!0}),game.settings.register(i.modName,"announce-asActor",{name:"tm.settings.announceAs.name",hint:"tm.settings.announceAs.hint",scope:"world",config:!1,type:Boolean,default:!0}),game.settings.register(i.modName,p,{name:"tm.settings.turnMarkerEnabled.name",hint:"tm.settings.turnMarkerEnabled.hint",scope:"world",config:!1,type:Boolean,default:!0,restricted:!0,onChange:e=>{e?game.combat&&game.combat.combatant&&game.combat.started&&s.Marker.placeTurnMarker(game.combat.combatant.token._id):s.Marker.deleteTurnMarker()}}),game.settings.register(i.modName,w,{name:"tm.settings.startEnabled.name",hint:"tm.settings.startEnabled.hint",scope:"world",config:!1,type:Boolean,default:!1,restricted:!0,onChange:e=>{e?game.combat&&game.combat.combatant&&game.combat.started&&s.Marker.placeStartMarker(game.combat.combatant.token._id):s.Marker.deleteStartMarker()}}),game.settings.register(i.modName,N,{name:"tm.settings.panToTokenEnabled.name",hint:"tm.settings.panToTokenEnabled.hint",scope:"world",config:!1,type:Boolean,default:!1,restricted:!0}),game.settings.register(i.modName,T,{name:"tm.settings.startImage.name",hint:"tm.settings.startImage.hint",scope:"world",config:!1,type:String,default:"",restricted:!0})}}},"./src/scripts/settingsForm.js":(e,t,a)=>{a.r(t),a.d(t,{SettingsForm:()=>r});var s=a("./src/scripts/settings.js");const n=["mp4","webm","ogg"];class r extends FormApplication{constructor(e,t={}){super(e,t)}static get defaultOptions(){return mergeObject(super.defaultOptions,{id:"turnmarker-settings-form",title:"Turn Marker - Global Settings",template:"./modules/turnmarker/templates/settings.html",classes:["sheet","tm-settings"],width:500,closeOnSubmit:!0})}getData(){return{turnMarkerEnabled:s.Settings.getIsEnabled("turnmarker"),ratio:s.Settings.getRatio("turnmarker"),image:this.getSelectList(s.imageTitles,s.Settings.getImageIndex("turnmarker")),customImage:s.Settings.getCustomImagePath(),previewPath:s.Settings.getImagePath(),onDeckMarkerEnabled:s.Settings.getIsEnabled("deckmarker"),deckRatio:s.Settings.getRatio("deckmarker"),deckImage:this.getSelectList(s.deckImageTitles,s.Settings.getImageIndex("deckmarker")),customDeckImage:s.Settings.getCustomDeckImagePath(),onDeckPreviewPath:s.Settings.getOnDeckImagePath(),onDeckPlayersOnly:s.Settings.getDeckPlayersOnly(),announceActors:this.getSelectList(s.announcedActorOptions,s.Settings.getAnnounceActors()),announce:s.Settings.shouldAnnounceTurns(),announceImage:s.Settings.getIncludeAnnounceImage(),announceTokenName:s.Settings.getAnnounceTokenName(),startMarkerEnabled:s.Settings.getIsEnabled("startmarker"),startMarkerPath:s.Settings.getStartMarkerPath(),panToTokenEnabled:s.Settings.getIsEnabled("panToToken")}}async _updateObject(e,t){console.log("Turn Marker | Saving Settings"),s.Settings.setRatio(t.ratio),t.image&&s.Settings.setImage("turnmarker",t.image),s.Settings.setCustomImagePath(t.customImage),s.Settings.setIsEnabled("turnmarker",t.turnMarkerEnabled),s.Settings.setShouldAnnounceTurns(t.announce),s.Settings.setAnnounceActors(t.announceActors),s.Settings.setIncludeAnnounceImage(t.announceImage),s.Settings.setAnnounceTokenName(t.announceTokenName),s.Settings.setIsEnabled("startmarker",t.startMarkerEnabled),s.Settings.setStartMarkerPath(t.startMarkerPath),s.Settings.setDeckRatio(t.deckRatio),t.deckImage&&s.Settings.setImage("deckmarker",t.deckImage),s.Settings.setCustomDeckImagePath(t.customDeckImage),s.Settings.setIsEnabled("deckmarker",t.onDeckMarkerEnabled),s.Settings.setDeckPlayersOnly(t.onDeckPlayersOnly),s.Settings.setIsEnabled("panToToken",t.panToTokenEnabled)}activateListeners(e){super.activateListeners(e);const t=e.find("#image"),a=e.find("#customImage"),n=e.find("#markerImgPreview"),r=e.find("#deckImage"),i=e.find("#customDeckImage"),m=e.find("#onDeckMarkerImgPreview");this.updatePreview(e),t.length>0&&t.on("change",(e=>{""==a[0].value.trim()&&n.attr("src",s.Settings.getImageByIndex(Number(e.target.value)))})),r.length>0&&r.on("change",(e=>{""==i[0].value.trim()&&m.attr("src",s.Settings.getDeckImageByIndex(Number(e.target.value)))})),a.length>0&&a.on("change",(t=>{this.updatePreview(e)})),i.length>0&&i.on("change",(t=>{this.updatePreview(e)}))}updatePreview(e){this._updateTurnmarkerPreview(e),this._updateOnDeckmarkerPreview(e)}_updateTurnmarkerPreview(e){const t=e.find("#image"),a=e.find("#customImage"),r=e.find("#markerImgPreview"),i=e.find("#markerVideoPreview");if(""==a[0].value.trim())t[0].disabled=!1,r.attr("src",s.Settings.getImageByIndex(Number(t[0].value))),r.removeClass("hidden"),i.addClass("hidden");else{t[0].disabled=!0;const e=this.getExtension(a[0].value);console.warn(e),n.includes(e.toLowerCase())?(i.attr("src",a[0].value),r.addClass("hidden"),i.removeClass("hidden")):(r.attr("src",a[0].value),r.removeClass("hidden"),i.addClass("hidden"))}}_updateOnDeckmarkerPreview(e){const t=e.find("#deckImage"),a=e.find("#customDeckImage"),r=e.find("#onDeckMarkerImgPreview"),i=e.find("#onDeckMarkerVideoPreview");if(""==a[0].value.trim())t[0].disabled=!1,r.attr("src",s.Settings.getDeckImageByIndex(Number(t[0].value))),r.removeClass("hidden"),i.addClass("hidden");else{t[0].disabled=!0;const e=this.getExtension(a[0].value);console.warn(e),n.includes(e.toLowerCase())?(i.attr("src",a[0].value),r.addClass("hidden"),i.removeClass("hidden")):(r.attr("src",a[0].value),r.removeClass("hidden"),i.addClass("hidden"))}}getExtension(e){return e.slice(2+(e.lastIndexOf(".")-1>>>0))}getSelectList(e,t){let a=[];return e.forEach(((e,s)=>{a.push({value:e,selected:s==t})})),a}}},"./src/scripts/turnmarker.js":(e,t,a)=>{a.r(t);var s=a("./src/scripts/chatter.js"),n=a("./src/scripts/marker.js"),r=a("./src/scripts/markeranimation.js"),i=a("./src/scripts/settings.js"),m=a("./src/scripts/updateWindow.js"),o=a("./src/scripts/utils.js");let c="";function g(e){if(e.data.hidden)return game.user.isGM;if(!canvas.sight.tokenVision)return!0;if(e._controlled)return!0;const t=canvas.tokens.placeables.find((e=>e.id===game.combat.combatant.tokenId));if(!t||t.data.hidden)return game.user.isGM;if(t._controlled)return!0;let a="turnmarker";e.data.flags.startMarker?a="startmarker":e.data.flags.deckMarker&&(a="deckmarker");const s=i.Settings.getRatio(a),n=e.data.width/s,r=e.data.height/s,m=Math.min(n,r)/4;return canvas.sight.testVisibility(e.center,{tolerance:m,object:e})}Hooks.once("init",(()=>{i.Settings.registerSettings()})),Hooks.once("ready",(()=>{game.user.isGM&&isNewerVersion(game.modules.get("turnmarker").data.version,i.Settings.getVersion())&&(0,m.renderUpdateWindow)(),game.socket.on(o.socketName,(async e=>{if(game.user.isGM&&e){const t=canvas.tiles.placeables.find((t=>t.id===e[0]));switch(e.mode){case o.socketAction.deleteStartMarker:await canvas.scene.deleteEmbeddedEntity("Tile",t),canvas.scene.setFlag(o.FlagScope,o.Flags.startMarkerPlaced,!0);break;case o.socketAction.deleteTurnMarker:case o.socketAction.deleteOnDeckMarker:await canvas.scene.deleteEmbeddedEntity("Tile",t)}}}))})),Hooks.on("canvasReady",(()=>{let e=canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker));e&&(e.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,e.parent.sortChildren(),!game.paused&&i.Settings.getShouldAnimate("deckmarker")&&r.MarkerAnimation.startAnimation("deckmarker"));let t=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker));t&&(t.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,t.parent.sortChildren(),!game.paused&&i.Settings.getShouldAnimate("turnmarker")&&r.MarkerAnimation.startAnimation("turnmarker"))})),Hooks.on("createTile",((e,t)=>{if(1==t.flags.turnMarker||1==t.flags.startMarker){const e=canvas.tiles.placeables.find((e=>e.id===t._id));e&&(1==t.flags.deckMarker?(e.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,e.parent.sortChildren(),!game.paused&&i.Settings.getShouldAnimate("deckmarker")&&r.MarkerAnimation.startAnimation("deckmarker")):1==t.flags.turnMarker&&(e.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,e.parent.sortChildren(),!game.paused&&i.Settings.getShouldAnimate("turnmarker")&&r.MarkerAnimation.startAnimation("turnmarker")),e.renderable=g(e))}})),Hooks.on("updateCombat",(async(e,t,a)=>{if(e.started||await n.Marker.deleteStartMarker(),e.combatant){let a=(0,o.getNextTurn)(e);if(t&&c!=e.combatant._id&&game.user.isGM&&game.userId==(0,o.firstGM)()&&(c=e.combatant._id,e&&e.combatant&&e.started)){await n.Marker.placeStartMarker(e.combatant.token._id),await n.Marker.placeOnDeckMarker(e.turns[a].token._id);let t=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker));if(await n.Marker.placeTurnMarker(e.combatant.token._id,t&&t.id||void 0),i.Settings.shouldAnnounceTurns()&&!e.combatant.hidden)switch(i.Settings.getAnnounceActors()){case 0:s.Chatter.sendTurnMessage(e.combatant);break;case 1:e.combatant.actor.hasPlayerOwner&&s.Chatter.sendTurnMessage(e.combatant);break;case 2:e.combatant.actor.hasPlayerOwner||s.Chatter.sendTurnMessage(e.combatant);break;case 3:s.Chatter.sendTurnMessage(e.combatant,!0)}!0===i.Settings.getIsEnabled("panToToken")&&await n.Marker.movePan(e.combatant.token._id)}}})),Hooks.on("deleteCombat",(async()=>{game.user.isGM&&await n.Marker.clearAllMarkers(),r.MarkerAnimation.stopAllAnimation()})),Hooks.on("updateToken",(async(e,t,a)=>{let s=canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker));if(s&&(a.x||a.y||a.width||a.height||a.hidden)&&game&&game.combat&&game.user.isGM&&game.combat){let e=game.combat.turn+1;e>=game.combat.turns.length&&(e=0);let t=game.combat.turns[e].token;await n.Marker.moveMarkerToToken(t._id,s.id,"deckmarker"),s.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,s.parent.sortChildren()}let r=canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker));r&&(a.x||a.y||a.width||a.height||a.hidden)&&game&&game.combat&&game.combat.combatant&&game.combat.combatant.tokenId==t._id&&game.user.isGM&&game.combat&&(await n.Marker.moveMarkerToToken(t._id,r.id,"turnmarker"),r.zIndex=Math.max(...canvas.tiles.placeables.map((e=>e.zIndex)))+1,r.parent.sortChildren())})),Hooks.on("updateTile",((e,t,a,s)=>{if(t.flags.turnMarker||t.flags.startMarker||t.flags.deckMarker){const e=canvas.tiles.placeables.find((e=>e.id===t._id));e&&(e.renderable=g(e))}})),Hooks.on("sightRefresh",(()=>{for(const e of canvas.tiles.placeables)(e.data.flags.turnMarker||e.data.flags.startMarker||e.data.flags.deckMarker)&&(e.renderable=g(e))})),Hooks.on("pauseGame",(e=>{e?r.MarkerAnimation.stopAllAnimation():(i.Settings.getShouldAnimate("turnmarker")&&canvas.tiles.placeables.find((e=>1==e.data.flags.turnMarker))&&r.MarkerAnimation.startAnimation("turnmarker"),i.Settings.getShouldAnimate("deckmarker")&&canvas.tiles.placeables.find((e=>1==e.data.flags.deckMarker))&&r.MarkerAnimation.startAnimation("deckmarker"))}))},"./src/scripts/updateWindow.js":(e,t,a)=>{a.r(t),a.d(t,{renderUpdateWindow:()=>n});var s=a("./src/scripts/settings.js");function n(){const e=game.modules.get("turnmarker");if(isNewerVersion(e.data.version,s.Settings.getVersion())){class t extends Application{static get defaultOptions(){return mergeObject(super.defaultOptions,{template:`modules/${e.id}/templates/updateWindow.html`,resizable:!1,width:500,height:600,classes:["updateWindow"],title:`${e.data.title} - Updated`})}getData(){return{version:e.data.version}}activateListeners(t){super.activateListeners(t),t.find(".show-again").on("change",(t=>{s.Settings.setVersion(t.currentTarget.checked?e.data.version:oldVersion)}))}}(new t).render(!0)}}},"./src/scripts/utils.js":(e,t,a)=>{a.r(t),a.d(t,{modName:()=>s,FlagScope:()=>n,Flags:()=>r,socketName:()=>i,socketAction:()=>m,findTokenById:()=>o,firstGM:()=>c,getNextTurn:()=>g});const s="turnmarker",n="turnmarker",r={startMarkerPlaced:"startMarkerPlaced"},i="module.turnmarker",m={placeStartMarker:0};function o(e){return canvas.tokens.ownedTokens.find((t=>t.id==e))}function c(){for(let e of game.users.entities)if(e.data.role>=4&&e.active)return e.data._id}function g(e){let t=e.turn+1;return t>=e.turns.length&&(t=0),t}}},t={};function a(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s](n,n.exports,a),n.exports}a.d=(e,t)=>{for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a("./src/scripts/turnmarker.js")})();
//# sourceMappingURL=turnmarker.js.map